name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_expense_tracker
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_expense_tracker"
        export REDIS_URL="redis://localhost:6379/1"
        export TESTING=true
    
    - name: Run linting
      run: |
        python -m flake8 app/ tests/
        python -m black --check app/ tests/
        python -m isort --check-only app/ tests/
    
    - name: Run type checking
      run: |
        python -m mypy app/
    
    - name: Run security analysis
      run: |
        python -m bandit -r app/
    
    - name: Run unit tests
      run: |
        python -m pytest -m unit tests/unit/ -v --tb=short
    
    - name: Run integration tests
      run: |
        python -m pytest -m integration tests/integration/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_expense_tracker
        REDIS_URL: redis://localhost:6379/1
    
    - name: Run end-to-end tests
      run: |
        python -m pytest -m e2e tests/e2e/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_expense_tracker
        REDIS_URL: redis://localhost:6379/1
    
    - name: Run performance tests
      run: |
        python -m pytest -m performance tests/performance/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_expense_tracker
        REDIS_URL: redis://localhost:6379/1
    
    - name: Generate coverage report
      run: |
        python -m pytest --cov=app --cov-report=xml --cov-report=html tests/
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_expense_tracker
        REDIS_URL: redis://localhost:6379/1
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml
    
    - name: Archive performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results-${{ matrix.python-version }}
        path: |
          performance-report.json
          performance-charts/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  load-testing:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run load tests
      run: |
        # Start the application in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Run load tests
        locust -f tests/load/locustfile.py --headless -u 50 -r 10 -t 60s --host http://localhost:8000
    
    - name: Archive load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: |
          load-test-report.html
          load-test-stats.csv

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Quality Gate Check
      run: |
        echo "All quality checks passed!"
        echo "✅ Tests: Passed"
        echo "✅ Security: Passed"
        echo "✅ Coverage: Above threshold"
        echo "✅ Performance: Within limits"